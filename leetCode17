"""Given a string s, find the length of the longest substring without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces."""
class Solution(object):
    def lengthOfLongestSubstring(self, s):
        l1 = list(s)
        l2 = []
        j = 0
        max = 0
        indeks = 0
        for i in range(len(l1)):
            if (l1[i] in l2):
                indeks = l2.index(l1[i]) + 1
                while (indeks > j):
                    l2.pop(0)
                    j += 1
            j = 0
            l2.append(l1[i])
            if (max < len(l2)):
                max = len(l2)
        return max
