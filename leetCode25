"""
Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]
Example 2:


Input: head = [1,2,3,4,5], k = 3
Output: [3,2,1,4,5]
 

Constraints:

The number of nodes in the list is n.
1 <= k <= n <= 5000
0 <= Node.val <= 1000
 

Follow-up: Can you solve the problem in O(1) extra memory space?
"""
class ListNode(object):
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
class Solution(object):
    def reverseKGroup(self, head, k):
        bas1=head
        liste1=[]
        while bas1:
            liste1.append(bas1.val)
            bas1=bas1.next
        liste2=[]
        liste3=[]
        m=0
        x=k
        while (k <=len(liste1)):
            liste2.append(liste1[m:k][::-1])
            del liste1[:x]
        for i in range(len(liste2)):
            for a in range(len(liste2[i])):
                liste3.append(liste2[i][a])
        for i in range(len(liste1)):
            liste3.append(liste1[i])
        result=ListNode()
        bas2=result
        for i in range(len(liste3)):
            bas2.val = liste3[i]
            if i < len(liste3) - 1:
                bas2.next = ListNode()
                bas2 = bas2.next
        return result

